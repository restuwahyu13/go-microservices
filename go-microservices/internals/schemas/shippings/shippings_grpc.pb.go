// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: protofiles/shippings.proto

package shippings

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShippingsServiceClient is the client API for ShippingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShippingsServiceClient interface {
	PingShippings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GrpcResponse, error)
}

type shippingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShippingsServiceClient(cc grpc.ClientConnInterface) ShippingsServiceClient {
	return &shippingsServiceClient{cc}
}

func (c *shippingsServiceClient) PingShippings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GrpcResponse, error) {
	out := new(GrpcResponse)
	err := c.cc.Invoke(ctx, "/shippings.ShippingsService/PingShippings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShippingsServiceServer is the server API for ShippingsService service.
// All implementations must embed UnimplementedShippingsServiceServer
// for forward compatibility
type ShippingsServiceServer interface {
	PingShippings(context.Context, *emptypb.Empty) (*GrpcResponse, error)
	mustEmbedUnimplementedShippingsServiceServer()
}

// UnimplementedShippingsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShippingsServiceServer struct {
}

func (UnimplementedShippingsServiceServer) PingShippings(context.Context, *emptypb.Empty) (*GrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingShippings not implemented")
}
func (UnimplementedShippingsServiceServer) mustEmbedUnimplementedShippingsServiceServer() {}

// UnsafeShippingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShippingsServiceServer will
// result in compilation errors.
type UnsafeShippingsServiceServer interface {
	mustEmbedUnimplementedShippingsServiceServer()
}

func RegisterShippingsServiceServer(s grpc.ServiceRegistrar, srv ShippingsServiceServer) {
	s.RegisterService(&ShippingsService_ServiceDesc, srv)
}

func _ShippingsService_PingShippings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingsServiceServer).PingShippings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shippings.ShippingsService/PingShippings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingsServiceServer).PingShippings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ShippingsService_ServiceDesc is the grpc.ServiceDesc for ShippingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShippingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shippings.ShippingsService",
	HandlerType: (*ShippingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingShippings",
			Handler:    _ShippingsService_PingShippings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/shippings.proto",
}
